---
title: "Lab Bayesian"
author: "Andres Navarro"
date: "2023-04-25"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
setwd("/home/me/MEGA/Uni/3YEAR/Q2/01\ Bayesian Analysis/Lab")
```

# Dataset Lookup

First of all, the objective of this Case Study will be to show the advantages of Bayesian Statistics and the power of Lasso and Ridge regression for small and high dimensional data sets. As it is known, Bayesian Statistics allows as to set up prior believes of our predictors with specific probability distributions. This is really useful when we do not have a lot of data and we have some insights on the data. For this reason I have decided to use a data set with 21 variables and I will be reducing the number of observations to simulate what we are trying to show. This data is about the COVID cases in Mexico and the goal is to predict if a patient has COVID or not.

[[<https://www.kaggle.com/datasets/meirnizri/covid19-dataset>][Dataset]]

```{r}
rm(list = ls())
data = read.csv("data.csv", header = TRUE)
dim(data)
```

```{r}
summary(data)
```

We will predict if a patient is diagnosed with covid or not

```{r}
data$COVID = ifelse(data$CLASIFFICATION_FINAL <= 3, 1, 2)
data = subset(data, select = -c(CLASIFFICATION_FINAL))

data$COVID = factor(data$COVID, labels = c("covid", "not covid"), levels = c(1, 2))
```

```{r}
data$USMER = factor(data$USMER, labels = c("treated", "not treated"), levels = c(1, 2))

data$MEDICAL_UNIT = factor(data$MEDICAL_UNIT)

data$SEX = factor(data$SEX, labels = c("female", "male"), levels = c(1, 2))

data$PATIENT_TYPE = factor(data$PATIENT_TYPE, labels = c("returned home", "hospitalized"), levels = c(1, 2))

data$INTUBED = factor(data$INTUBED, labels = c("intubed", "not intubed"), levels = c(1, 2))

data$PNEUMONIA = factor(data$PNEUMONIA, labels = c("pneumonia", "not pneumonia"), levels = c(1, 2))

data$PREGNANT = factor(data$PREGNANT, labels = c("pregnant", "not pregnant"), levels = c(1, 2))

data$DIABETES = factor(data$DIABETES, labels = c("diabetes", "not diabetes"), levels = c(1, 2))

data$COPD = factor(data$COPD, labels = c("copd", "not copd"), levels = c(1, 2))

data$ASTHMA = factor(data$ASTHMA, labels = c("asthma", "not asthma"), levels = c(1, 2))

data$INMSUPR = factor(data$INMSUPR, labels = c("inmsupr", "not inmsupr"), levels = c(1, 2))

data$HIPERTENSION = factor(data$HIPERTENSION, labels = c("hipertension", "not hipertension"), levels = c(1, 2))

data$OTHER_DISEASE = factor(data$OTHER_DISEASE, labels = c("other desease", "not other desease"), levels = c(1, 2))

data$CARDIOVASCULAR = factor(data$CARDIOVASCULAR, labels = c("cardiovascular", "not cardiovascular"), levels = c(1, 2))

data$OBESITY = factor(data$OBESITY, labels = c("obesity", "not obesity"), levels = c(1, 2))

data$RENAL_CHRONIC = factor(data$RENAL_CHRONIC, labels = c("renal chronic", "not renal chronic"), levels = c(1, 2))

data$TOBACCO = factor(data$TOBACCO, labels = c("tobacco", "not tobacco"), levels = c(1, 2))

data$ICU = factor(data$ICU, labels = c("icu", "not icu"), levels = c(1, 2))

data = subset(data, select = -c(DATE_DIED))

```

## Data Cleaning

```{r}
print(length(which(is.na(data))))

hist(rowMeans(is.na(data)), xlab = c("Missing values average by rows"), main = c())
```

```{r}
indexesEmptyCols = which(colMeans(is.na(data)) != 0)

colsWithNA = sort(colMeans(is.na(data[, indexesEmptyCols])), 
                  decreasing = TRUE)

barplot(colsWithNA, las=2)
```

```{r}
data = subset(data, select = -c(ICU, INTUBED, PREGNANT))

print(length(which(is.na(data))))
```

```{r}
data = na.omit(data)

length(unique(which(is.na(data))))
```

```{r}
summary(data)
```

# Data Exploration

```{r}
rm(list = setdiff(ls(), "data"))

library(ggplot2) # GGally
library(GGally)

ggcorr(data, cor_matrix = cor(sapply(data, as.numeric)), label = TRUE)
```

Correlation with the covid variable

```{r}
corr_covid = sort(cor(sapply(subset(data, select = -c(COVID)), as.numeric))[1,], decreasing = T)

corr = data.frame(corr_covid)

ggplot(corr,aes(x = row.names(corr), y = corr_covid)) + geom_bar(stat = "identity") + 
  scale_x_discrete(limits= row.names(corr)) +  labs(x = "", y = "covid", title = "Correlations") + 
  theme(plot.title = element_text(hjust = 0, size = rel(1.5)), axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
library(GGally)

ggpairs(data[1:10000,], progress = FALSE)
```

```{r}
ggplot(data, aes(x=COVID, y=AGE)) + 
  geom_boxplot()
```

```{r}
plot(table(data$COVID, data$USMER))
plot(table(data$COVID, data$MEDICAL_UNIT))
plot(table(data$COVID, data$SEX))
plot(table(data$COVID, data$PATIENT_TYPE))
plot(table(data$COVID, data$PNEUMONIA))
plot(table(data$COVID, data$DIABETES))
plot(table(data$COVID, data$COPD))
plot(table(data$COVID, data$ASTHMA))
plot(table(data$COVID, data$INMSUPR))
plot(table(data$COVID, data$HIPERTENSION))
plot(table(data$COVID, data$OTHER_DISEASE))
plot(table(data$COVID, data$CARDIOVASCULAR))
plot(table(data$COVID, data$OBESITY))
plot(table(data$COVID, data$RENAL_CHRONIC))
plot(table(data$COVID, data$TOBACCO))
```

# Frequentist LM

```{r}
rm(list = setdiff(ls(), c("data")))

library(caret)
library(lattice)

index.test = createDataPartition(data$COVID, p = 0.5, list = FALSE)

data.test = data[index.test,]
data.train = data[-index.test,]

rm(index.test)
```

```{r}
fit = train(COVID ~ ., data = data.train, method = "glm", family = "binomial")

summary(fit)
```

```{r}
confusionMatrix(data.test$COVID, predict(fit, newdata = data.test))
```

```{r}
fit = train(COVID ~ USMER + PNEUMONIA + MEDICAL_UNIT + DIABETES + HIPERTENSION + AGE + PATIENT_TYPE, data = data, method = "glm", family = "binomial")
summary(fit)
```

```{r}
confusionMatrix(data.test$COVID, predict(fit, newdata = data.test))
```

# Bayesian LM

```{r message=FALSE}
library(coda)
library(MASS)
library(MCMCpack)
```

```{r}
rm(list = setdiff(ls(), c("data", "data.test", "data.train")))

fit = MCMClogit(ifelse(as.numeric(COVID) == 1, 0, 1) ~ ., data = data.train, burnin=1000, mcmc=21000)
plot(fit)
summary(fit)
confusionMatrix(data.test$COVID, predict(fit, newdata = data.test))

```

# Bayesian LM with Lasso / Ridge
